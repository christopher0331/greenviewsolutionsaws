{"version":3,"file":"router.production.min.js","sources":["../../history.ts","../../utils.ts","../../router.ts","../../index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nconst readOnly: <T>(obj: T) => Readonly<T> = __DEV__\n  ? (obj) => Object.freeze(obj)\n  : (obj) => obj;\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Location {\n  return readOnly<Location>({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  });\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\nimport { DataResult, DataRouteMatch } from \"./router\";\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType = \"application/x-www-form-urlencoded\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * Arguments passed to route loader/action functions\n */\nexport interface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: DataFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: DataFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: DataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: DataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string, optionally prefixed with another string.\n    // Otherwise, it's a failure.\n    Segment extends `${string}:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import { createPath } from \"./history\";\nimport type { History, Location, Path, To } from \"./history\";\nimport { Action as HistoryAction, createLocation, parsePath } from \"./history\";\n\nimport { invariant } from \"./utils\";\nimport type {\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport { ErrorResponse, matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * Navigate forward/backward in the history stack\n   * @param path Delta to move in the history stack\n   */\n  navigate(path: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param path Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(path: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * Trigger a fetcher load/submission\n   *\n   * @param key Fetcher key\n   * @param href href to fetch\n   * @param opts Fetcher options, (method, submission, etc.)\n   */\n  fetch(key: string, href: string, opts?: RouterNavigateOptions): void;\n\n  /**\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * Internal fetch AbortControllers accessed by unit tests\n   * @private\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should reset the scroll position if we\n   * are unable to restore the scroll position\n   */\n  resetScrollPosition: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: DataRouteMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  resetScroll?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\nenum ResultType {\n  data = \"data\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult = SuccessResult | RedirectResult | ErrorResult;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided function to call on all state changes\n  let subscriber: RouterSubscriber | null = null;\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n  let pendingResetScroll = true;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscriber = null;\n    pendingNavigationController?.abort();\n    for (let [, controller] of fetchControllers) {\n      controller.abort();\n    }\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Always preserve any existing loaderData from re-used routes\n      loaderData: mergeLoaderData(state, newState),\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    path: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error,\n    } = normalizeNavigateOptions(\n      typeof path === \"string\" ? parsePath(path) : path,\n      opts\n    );\n\n    let location = createLocation(state.location, normalizedPath, opts?.state);\n    let historyAction = opts?.replace\n      ? HistoryAction.Replace\n      : HistoryAction.Push;\n    let resetScroll =\n      opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (\n      state.navigation.state === \"submitting\" &&\n      state.navigation.formMethod !== \"get\"\n    ) {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      resetScroll?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation\n    saveScrollPosition(state.location, state.matches);\n\n    // Track whether we should reset scroll on completion\n    pendingResetScroll = opts?.resetScroll !== false;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    if (opts?.pendingError) {\n      let boundaryMatch = findNearestBoundary(matches);\n      completeNavigation(historyAction, location, {\n        matches,\n        errors: {\n          [boundaryMatch.route.id]: opts?.pendingError,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingActionError: RouteData | null = null;\n\n    if (opts?.submission) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingNavigation,\n      pendingActionData,\n      pendingActionError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission,\n    matches: DataRouteMatch[]\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      if (__DEV__) {\n        console.warn(\n          \"You're trying to submit to a route that does not have an action.  To \" +\n            \"fix this, please add an `action` function to the route for \" +\n            `[${createHref(location)}]`\n        );\n      }\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(\n          405,\n          \"Method Not Allowed\",\n          `No action found for [${createHref(location)}]`\n        ),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideNavigation: Navigation | undefined,\n    pendingActionData: RouteData | null,\n    pendingActionError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      pendingActionData,\n      pendingActionError,\n      fetchLoadMatches\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, location, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach((key) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      navigationResults,\n      pendingActionError,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key: string, href: string, opts?: RouterNavigateOptions) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    invariant(matches, `No matches found for fetch url: ${href}`);\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    let { path, submission } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    handleFetcherLoader(key, createPath(path), match, loadingFetcher);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: Submission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      { [match.route.id]: actionResult.data },\n      null, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, nextLocation, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((staleKey) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let loaderRedirect = findRedirect(loaderResults);\n    if (loaderRedirect) {\n      let redirectNavigation = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data\n      updateState({\n        errors,\n        loaderData,\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key);\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  // Utility function to handle redirects returned from an action or loader\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    await startNavigation(HistoryAction.Replace, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  path: Partial<Path>,\n  opts?: RouterNavigateOptions\n): {\n  path: Partial<Path>;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let searchParams = new URLSearchParams(path.search);\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(\n          400,\n          \"Bad Request\",\n          \"Cannot submit binary form data using GET\"\n        ),\n      };\n    }\n  }\n\n  return {\n    path: { ...path, search: `?${searchParams}` },\n  };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  pendingActionData: RouteData | null,\n  pendingActionError: RouteData | null,\n  revalidatingFetcherMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError\n    ? matches.findIndex(\n        (m) => m.route.id === Object.keys(pendingActionError)[0]\n      )\n    : matches.length;\n\n  let actionResult = pendingActionError\n    ? Object.values(pendingActionError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        submission,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Promise<DataResult> {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n      };\n    }\n\n    return { type: resultType, data };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  return { type: resultType, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let { formMethod, formEncType, formData } = submission;\n  let body = formData;\n\n  // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      invariant(\n        typeof value === \"string\",\n        'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n          'please use \"multipart/form-data\" instead.'\n      );\n      body.append(key, value);\n    }\n  }\n\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    headers: {\n      \"Content-Type\": formEncType,\n    },\n    body,\n  });\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingActionError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[]\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingActionError) {\n    errors = pendingActionError;\n  }\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(([key, href, match], index) => {\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  state: RouterState,\n  newState: Partial<RouterState>\n): RouteData {\n  // Identify active routes that have current loaderData and didn't receive new\n  // loaderData\n  let reusedRoutesWithData = (newState.matches || state.matches).filter(\n    (match) =>\n      state.loaderData[match.route.id] !== undefined &&\n      newState.loaderData?.[match.route.id] === undefined\n  );\n  return {\n    ...newState.loaderData,\n    ...reusedRoutesWithData.reduce(\n      (acc, match) =>\n        Object.assign(acc, {\n          [match.route.id]: state.loaderData[match.route.id],\n        }),\n      {}\n    ),\n  };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId?: string\n): DataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): {\n  matches: DataRouteMatch[];\n  route: DataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n","import type {\n  BrowserHistoryOptions,\n  HashHistoryOptions,\n  MemoryHistoryOptions,\n} from \"./history\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n} from \"./history\";\nimport type { Router, RouterInit } from \"./router\";\nimport { createRouter } from \"./router\";\n\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createHashRouter({\n  window,\n  ...routerInit\n}: HashHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nexport * from \"./router\";\n\nexport type {\n  ActionFunction,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  JsonFunction,\n  LoaderFunction,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RouteMatch,\n  RouteObject,\n  ShouldRevalidateFunction,\n  Submission,\n} from \"./utils\";\n\nexport {\n  generatePath,\n  getToPathname,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  json,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  redirect,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\nexport type {\n  BrowserHistory,\n  HashHistory,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To,\n} from \"./history\";\n\nexport {\n  Action,\n  createBrowserHistory,\n  createPath,\n  createHashHistory,\n  createMemoryHistory,\n  parsePath,\n} from \"./history\";\n\nexport { createBrowserRouter, createHashRouter, createMemoryRouter };\n"],"names":["Action","exports","PopStateEventType","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","createLocation","pathname","location","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","_globalHistory$state","_globalHistory$state2","search","hash","usr","createHashHistory","_globalHistory$state3","_globalHistory$state4","parsePath","substr","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","getHistoryState","current","_extends","random","toString","_ref","charAt","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","handlePop","Error","addEventListener","removeEventListener","historyState","pushState","error","assign","replaceState","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","parentsMeta","parentPath","forEach","route","relativePath","caseSensitive","startsWith","invariant","joinPaths","concat","children","computeScore","paramRe","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","endsWith","RegExp","compilePath","captureGroups","memo","splatValue","value","decodeURIComponent","safelyDecodeURIComponent","toLowerCase","nextChar","message","resolvePath","fromPathname","toPathname","pop","join","resolvePathname","normalizeSearch","normalizeHash","paths","ErrorResponse","constructor","status","statusText","data","this","ResultType","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","init","_init$hydrationData","_init$hydrationData2","_init$hydrationData4","_init$hydrationData5","_init$hydrationData6","dataRoutes","convertRoutesToDataRoutes","unlistenHistory","subscriber","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","id","router","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","_init$hydrationData3","_init$hydrationData3$","console","warn","pendingNavigationController","historyAction","initialized","navigation","restoreScrollPosition","resetScrollPosition","revalidation","actionData","fetchers","Map","pendingAction","pendingResetScroll","isUninterruptedRevalidation","isRevalidationRequired","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","Set","fetchLoadMatches","updateState","newState","completeNavigation","isActionReload","mergeLoaderData","getSavedScrollPosition","HistoryAction","async","startNavigation","opts","_pendingNavigationCon2","abort","startUninterruptedRevalidation","saveScrollPosition","resetScroll","loadingNavigation","overrideNavigation","notFoundMatches","pendingError","findNearestBoundary","pendingActionData","pendingActionError","submission","actionOutput","hasNakedIndexQuery","result","actionMatch","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","shortCircuited","type","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","handleAction","matchesToLoad","revalidatingFetchers","getMatchesToLoad","_ref2","_state$fetchers$get","revalidatingFetcher","get","set","abortController","_ref3","results","Promise","all","_ref4","navigationResults","fetcherResults","delete","redirect","findRedirect","getLoaderRedirect","processLoaderData","doneKeys","fetcher","markFetchersDone","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","revalidate","abortFetcher","controller","keys","doneFetcher","landedId","yeetedKeys","y","initialize","subscribe","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeNavigateOptions","fetch","_state$fetchers$get2","has","_state$fetchers$get3","actionResult","add","loadingFetcher","boundaryMatch","loadId","loadFetcher","_ref5","staleKey","_ref6","_state$fetchers$get4","_ref7","loaderResults","loaderRedirect","_pendingNavigationCon3","handleFetcherAction","handleFetcherLoader","deleteFetcher","dispose","_pendingNavigationCon","_internalFetchControllers","allIds","treePath","searchParams","URLSearchParams","name","append","revalidatingFetcherMatches","deepestRenderableMatchIndex","findIndex","values","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","shouldRevalidateLoader","currentLocation","_currentMatch$route$p","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","shouldRevalidate","resultType","handler","request","createRequest","e","Response","_result$headers$get","headers","json","text","Request","body","method","toUpperCase","_ref8","_errors","reusedRoutesWithData","_newState$loaderData","acc","routeId","reverse","find","errorElement","r","getAll","v","origin","URL","routerInit","_objectWithoutPropertiesLoose","_excluded2","_excluded3","_excluded","responseInit","Headers","JSON","stringify","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","cond"],"mappings":"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"}